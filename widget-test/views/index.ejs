<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en">
<head>
    <meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
    <meta name="language" content="en" />
    <script type="text/javascript" src="http://code.jquery.com/jquery-1.3.js"></script>
</head>
<body>
<h2><%=  title   %></h2>
<a href="/">main</a>
<a style="margin-left: 10px" href="/test">test</a>
<div>
    Внедрение на сайт
    Виджет
    В код сайта добавляется виджет (по аналогии с Callbackhunter).
    На сайте должна отображаться картинка телефона (желательно анимированная).
    Место размещения - правый нижний угол браузера, при скроле текста страницы изображение телефона должно оставаться на изначальном месте.

    Примечания:
    По сути, всю логику мы здесь “срисовали” с Callbackhunter.
    Относительно картинки: ни в коем случае не брать картинку, используемую Callbackhunter. Нужно в интернете поискать подходящие картинки - картинок телефонов должно быть полно, если нужно будет, купим.

    Технические примечания:
    Когда то мы такие виджеты делали, но как именно, я уже не помню.
    Первым делом нужно определиться с механизмом реализации и выяснить ограничения. Поискать можно, например, по таким запросам: “embeddable javascript widget”, “web widget”.
    Технически нам нужно следующее:
    виджет вставляется в страницу в виде кода (только ссылка на javascript либо ссылка на javascript + html элемент в который будет внедрен виджет)
    виджет имеет некоторое количество настроек (передаются через изначальный код)
    виджет загружается с другого сервера (в общем случае у нас отдельный хост для виджета, отдельный для сайта, чтобы можно было на разных сайтах использовать)
    виджет добавляет свой html и обработчики событий, виджет умеет показывать диалог
    виджет может получить доступ к внешней странице (например, назначить свой обработчик для внешней ссылки)
    у виджета есть серверная часть (описана ниже)
    виджет может отслеживать перемещения пользователя по страницам. Тут нужно подумать - желательно обойтись без участия сервера. Можно попробовать сохранять данные о посещении страниц в cookie или local storage.
    Обработка внешней ссылки / кнопки
    Также должна быть возможность добавления кнопки (или ссылки) “Заказ звонка”, при нажатии на которую будут выполняться те же действия, что и при нажатии на изображение телефона в виджете.

    Примечание
    У нас сейчас на сайте есть кнопка “Заказать обратный звонок”. Ее поведение нужно будет изменить по описанию выше.
    .

    Техническое примечание. В настройки виджета мы можем передавать селектор, виджет по этому селектору находит на странице элементы и вешает на них свой обработчик для показа диалога.
    Рабочее время / есть абоненты в online
    Понятно, что менеджеры не всегда будут в online и готовы принять звонок.

    Пользователю на сайте должно отобразиться актуальное сообщение, о звонке прямо сейчас или о отложенном звонке.

    Здесь можно пойти несколькими путями:
    Определение, есть ли кто-то в данный момент в online из абонентов
    Этот вариант предпочтительней, но нужно обсудить техническую возможность реализации
    Ручное задание рабочего времени
    Изначально выглядит более легким, но здесь можно столкнуться с бизнес-логикой
    Задание времени рабочего времени 09:00 - 17:00
    В реальности мы можем быть на месте и в 18:00 - имеем пропущенный звонок
    В реальности может не быть на месте в рабочее время - имеем не отвеченный звонок
    Рабочие / нерабочие дни - вроде все понятно, пн., пт., но как быть с праздниками?

    Вывод: нужно реализовывать определение активности абонентов АТС (нужно разобраться, как это сделать).
    Техническое примечание. Этот функционал будет реализован в серверной части виджета. Т.е. вижет будет периодически запрашивать доступность абонентов у своего сервера.
    Также, когда разберемся, как делать определение состояния абонентов, нужно посмотреть на настройки канала Asterisk - может быть что-то туда добавить.
    Диалог запроса обратного звонка
    Внешний вид
    Диалог появляется “поверх” сайта.

    Рис 1. - Диалог запроса обратного звонка
    Нужно, чтобы страница сайта на заднем фоне стала “мутной” или затемненной.
    Ввод номера
    Изначально поле ввода номера серым шрифтом отображается “Введите Ваш телефон”, когда фокус ввода попадает, в зависимости от страны в поле ввода, в начале автоматически подставляется префикс:
    Украина - “+38”
    Россия - “+7”
    Казахстан - “+7”
    Другая страна - “+”
    Если пользователь уже производил звонок с сайта, то автоматически подставляется введенный в прошлый раз номер телефона.
    Пользователь может полностью отредактировать телефонный номер (включая префикс).
    Текст диалога запроса обратного звонка
    Текст диалога запроса обратного звонка зависит от того по какому событию показан диалог:
    Посетитель нажал “Заказ звонка” сам, есть активные абоненты
    Укажите Ваш телефон, мы перезвоним Вам за 1 минуту.
    Посетитель нажал “Заказ звонка” сам, нет активных абонентов
    К сожалению, мы не в офисе.
    Укажите Ваш телефон и мы перезвоним Вам в рабочее время.
    Автоматическое отображение диалога
    Хотите, мы перезвоним Вам за 1 минуту и ответим на все Ваши вопросы?
    Нажатие на кнопку “Жду звонка”
    Осуществляется проверка корректности введенного номера.
    Если номер некорректен, то поле ввода номера выделяется красным, дальше ничего не происходит.

    Действия при нажатии на кнопку “Жду звонка” различаются в зависимости от того, есть ли на данный момент активные абоненты.
    Активные абоненты есть
    Происходят следующие действия:
    Запись о звонке записывается в БД
    Отправляется e-mail, тема “Заказ звонка - online”, дата/время, номер телефона
    Осуществляется звонок через Asterisk
    Кнопка “Жду звонка” меняет цвет, текст изменяется на “Соединение...”
    Нужно понять, сможем ли мы получить обратную связь от Asterisk и отобразить клиенту (если вызов пошел - убрать диалог, если не удалось, то написать, что обращение зарегистрировано и перезвонят позже). Если обратной связи нет, то в диалоге просто показать “Спасибо…” и через несколько секунд закрыть его
    Активных абонентов нет
    Запись о звонке записывается в БД
    Отправляется e-mail, тема “Заказ звонка - ОТЛОЖЕННЫЙ”, дата/время, номер телефона
    Пользователю отображается

    Автоматическое отображение диалога запроса звонка
    При попадании посетителя на сайт анализируется время, проведенное на сайте, а также количество просмотренных страниц (параметры задаются при создании виджета).
    Если один из параметров >= пороговому значению, то диалог запроса обратного звонка отображается автоматически.

    Серверное приложение виджета
    Алгоритм работы виджета:
    Код виджета вставляется на веб-страницу
    Виджет загружается на страницу и инициализируется
    Часть параметров виджета передается через код, вставленный на страницу, другая часть - берется из БД сервера (параметры описаны ниже)
    Когда пользователь вводит номер телефона и запрашивает звонок, виджет отправляет запрос на свой сервер, который этот запрос обрабатывает (отправляет команду в Asterisk, отправляет email и т.д.)

    Серверное приложение виджета отвечает за бизнес-логику, а также предоставляет веб-интерфейс для пользователей виджета - регистрация, создание виджета и генерация его кода.
    Также в базу данных серверного приложения сохраняется вся информация о поступивших запросах на обратный звонок: время обращения, телефон клиента, удачно ли отправлен вызов на каждый канал (т.е. ошибки не было).

    Предлагаемая реалзиация серверного приложения - на базе mean.js, развертывание - на платформе Amazon AWS.
    На данный момент веб-интерфейс должен поддерживать следующие функции:
    Регистрация и аутентификация пользователей (через passport.js)
    Страница управления виджетами:
    Список существующих виджетов, просмотр / удаление виджета
    Создание нового виджета
    Статистика вызовов - список отправленных запросов на звонки

    Страница для создания нового виджета
    Страница содержит следующие поля:
    Название виджета
    URL сайта, на который устанавливается виджет
    Когда приходят запросы от виджета, нужно сверять URL с которого пришел запрос
    Каналы отправки сообщения (каждый канал может быть включен / выключен):
    Отправка команды на Asterisk
    IP сервера Asterisk (параметры, специфичные для канала доступны, если канал включен)
    Port сервера Asterisk, по-умолчанию 5038
    Отправка email уведомления
    Email, на который отправлять уведомление (можно ввести несколько email’ов через запятую)
    Пока не делаем, но в будущем возможно добавление других каналов со своими настройками - POST на заданный URL, DM в twitter, SMS, … Т.е. нужно предусмотреть это в коде.
    Дополнительные параметры, которые включаются в код виджета
    Время нахождения посетителя на сайте, необходимое для автоматической активации виджета, по-умолчанию 90 секунд
    Количество посещенных страниц, необходимое для автоматической активации виджета, по-умолчанию 3 страницы
    Примечание: два параметра выше работают по логике “ИЛИ” - т.е. любое из событий вызывает автоматическую активацию виджета
    Тексты сообщения диалога обратного звонка
    Нажатие на кнопку - Абоненты активны
    Укажите Ваш телефон, мы перезвоним Вам за 1 минуту.
    Нажатие на кнопку - Абоненты не активны
    К сожалению, мы не в офисе.
    Укажите Ваш телефон и мы перезвоним Вам в рабочее время.
    Автоматический показ
    Хотите, мы перезвоним Вам за 1 минуту и ответим на все Ваши вопросы?
    Текст 2-го диалога, после заказа отложенного звонка
    Спасибо за обращение, мы перезвоним Вам в ближайшее время.
    Селектор элементов, на которые нужно “повесить” обработчик виджета, строка, необязательное поле
    Кнопка “Сгенерировать код”
    Каждому виджету присваивается уникальный ID, по которому мы можем идентифицировать этот виждет при поступлении от него запросов
    Статистика вызовов -  список отправленных запросов на звонки
    Таблица со звонками содержит поля:
    Дата/время звонка
    Телефон клиента
    Тип (online / ОТЛОЖЕННЫЙ)
    Есть возможность выбора периода времени, за который отображать звонки.
    По умолчанию отображаются данные за последние 30 дней.
</div>
<link rel="stylesheet" type="text/css" href="<%=  widget_server_host   %>/widget/css/style.css"/>
<script type="text/javascript">
    var widget_server_host = "<%=  widget_server_host   %>";
    var widget_id = "<%=  widget_id   %>";
</script>
<script type="text/javascript" src="<%=  widget_server_host   %>/widget/js/callback.js"></script>
</body>
</html>
